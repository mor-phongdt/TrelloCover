{"remainingRequest":"/home/windddd1/Desktop/SourceCodeBase/project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/windddd1/Desktop/SourceCodeBase/project/src/page/ManageSong/Create.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/windddd1/Desktop/SourceCodeBase/project/src/page/ManageSong/Create.vue","mtime":1566977002448},{"path":"/home/windddd1/Desktop/SourceCodeBase/project/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/windddd1/Desktop/SourceCodeBase/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/windddd1/Desktop/SourceCodeBase/project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions } from 'vuex';\nimport PictureInput from 'vue-picture-input';\n\nimport axios from 'axios';\nimport VueAxios from 'vue-axios';\nimport Vue from 'vue';\n\nVue.use(VueAxios, axios);\n\nexport default {\n  data(vm) {\n    return {\n      name: '',\n      date: new Date().toISOString().substr(0, 10),\n      dateFormatted: vm.formatDate(new Date().toISOString().substr(0, 10)),\n      menu1: false,\n      valueOfKind: '',\n      kinds: ['Pop', 'Ballad', 'Rap'],\n      lyrics: '',\n      imageFile: '',\n      drawer: true,\n      value: '',\n      selectedSingers: [],\n      singers: [],\n    };\n  },\n  components: {\n    PictureInput,\n  },\n  created() {\n    this.$store.watch(\n      state => state.hambuger.drawer,\n      () => {\n        const msg = this.$store.state.hambuger.drawer;\n        if (msg !== '') {\n          this.drawer = msg;\n        }\n      },\n    );\n    axios\n      .get('http://jsonplaceholder.typicode.com/posts?userId=1')\n      .then(res => res.data)\n      .then((data) => {\n        data.forEach((item) => {\n          this.singers.push(item.id);\n        });\n      });\n  },\n  computed: {\n    computedDateFormatted() {\n      return this.formatDate(this.date);\n    },\n  },\n  watch: {\n    date(val) {\n      this.dateFormatted = this.formatDate(this.date);\n    },\n  },\n\n  methods: {\n    ...mapActions('singer', {\n      addSinger: 'addSinscssger',\n    }),\n    // format Date\n    formatDate(date) {\n      if (!date) return null;\n\n      const [year, month, day] = date.split('-');\n      return `${month}/${day}/${year}`;\n    },\n    parseDate(date) {\n      if (!date) return null;\n\n      const [month, day, year] = date.split('/');\n      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    },\n    // multiselect\n    clearAll() {\n      this.selectedSingers = [];\n    },\n    // main event\n    submit() {\n      this.$validator\n        .validateAll()\n        .then((result) => {\n          console.log(result);\n          if (!this.imageFile) {\n            this.$store.commit('setSnack', {\n              snack: 'Please upload image',\n              color: 'error',\n            });\n            return;\n          }\n          if (result) {\n            const loader = this.$loading.show();\n            this.addSinger({\n              fullname: this.fullname,\n              date: this.dateFormatted,\n              country: this.country,\n              followers: this.followers,\n              biography: this.biography,\n              imageFile: this.imageFile,\n            })\n              .then(() => {\n                this.$store.commit('setSnack', {\n                  snack: 'Data has been added successfully!',\n                  color: 'success',\n                });\n                this.clear();\n                this.$router.push({ name: 'SingerListPage' });\n                loader.hide();\n              })\n              .catch((error) => {\n                this.$store.commit('setSnack', {\n                  snack: `Something went wrong, please try again later${error.message}`,\n                  color: 'error',\n                });\n                loader.hide();\n              });\n          }\n        })\n        .catch((error) => {\n          this.$store.commit('setSnack', {\n            snack: `Something went wrong, please try again later${error.message}`,\n            color: 'error',\n          });\n        });\n    },\n    onChange() {\n      if (this.$refs.pictureInput.image) {\n        this.imageFile = this.$refs.pictureInput.file;\n      }\n      console.log(this.$refs.pictureInput.file);\n      // if (this.$refs.pictureInput.image) {\n      //   let vm = this;\n      //   this.imageFile = this.$refs.pictureInput.file;\n      //   //create a storage ref\n      //   const storageRef = firebase\n      //     .storage()\n      //     .ref(\"image/\" + this.imageFile.name);\n      //   const task = storageRef.put(this.imageFile).then(snapshot => {\n      //     storageRef\n      //       .getDownloadURL()\n      //       .then(function(url) {\n      //         // get Url\n      //         vm.imageFileUrl = url;\n      //         console.log(vm.imageFileUrl);\n      //       })\n      //       .catch(error => {\n      //         console.log(error.message);\n      //       });\n      //   });\n      // }\n      // if (image) {\n      //   console.log(image);\n\n      //   this.imageFile = image;file\n      //   console.log(this.imageFile);\n      // } else {\n      //   console.log(\"FileReader API not supported: use the <form>, Luke!\");\n      // }\n\n      // const file = e.target.files[0];\n      // \t\tconsole.log(file);\n      // \t\t//create a storage ref\n      // \t\tconst storageRef = firebase.storage().ref('image/' + file.name);\n      // \t\t//upload file\n      // \t\tconst task = storageRef.put(file)\n      // \t\t\t.then((snapshot) => {\n      // \t\t\t\tstorageRef.getDownloadURL().then(function (url) {\n      // \t\t\t\t\t// get Url\n      // \t\t\t\t\timageUrlStorage = url;\n      // \t\t\t\t}).catch()\n      // \t\t\t});\n    },\n    onRemoved() {\n      // // Create a reference to the file to delete\n      // var desertRef = storageRef.child(\"images/\"+this.imageFile.name);\n\n      // // Delete the file\n      // desertRef\n      //   .delete()\n      //   .then(function() {\n\n      //   })\n      //   .catch(function(error) {\n      //     console.log(error.message);\n      //   });\n      //   this.imageFileUrl = \"\";\n      this.imageFile = '';\n    },\n    clear() {\n      this.$validator.reset();\n    },\n  },\n};\n",{"version":3,"sources":["Create.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Create.vue","sourceRoot":"src/page/ManageSong","sourcesContent":["<template>\n  <v-form :class=\" drawer ? {showform:true}: {hideform:true}\" @submit.prevent=\"submit()\">\n    <v-card-title style=\"margin:30px auto 20px 0\">\n      <h5>Add Song</h5>\n    </v-card-title>\n    <div class=\"grid\">\n      <div>\n        <picture-input\n          class=\"input-wrapper\"\n          style=\"margin-top: 0px !important\"\n          ref=\"pictureInput\"\n          @change=\"onChange\"\n          @remove=\"onRemoved\"\n          :width=\"400\"\n          :height=\"500\"\n          :crop=\"false\"\n          :removable=\"true\"\n          margin=\"15\"\n          accept=\"image/jpg, image/png\"\n          size=\"2\"\n          removeButtonClass=\"v-btn white\"\n          button-class=\"v-btn white\"\n          :customStrings=\"{\n                      change: `Change`,\n                      remove: `Remove`,\n                      drag: `<p style='font-size: 15px'>Drag and Drop image of song here</p>`\n                    }\"\n        ></picture-input>\n        <span class=\"mt-10 red--text\">(*) Note: maxsize image is 2MB</span>\n      </div>\n      <div>\n        <v-text-field\n          style=\"height:70px\"\n          class=\"input-wrapper\"\n          v-model=\"name\"\n          :counter=\"50\"\n          v-validate=\"{required: 'required', min:6, max:50,}\"\n          :error-messages=\"errors.collect('name')\"\n          data-vv-name=\"name\"\n          label=\"Name\"\n          outlined\n          required\n        ></v-text-field>\n        <div class=\"input-wrapper\">\n          <vv-select\n            class=\"mt-3 mb-5\"\n            style=\"width:80%;margin-right:20px\"\n            v-model=\"valueOfKind\"\n            :options=\"kinds\"\n            v-validate=\"{required: 'required'}\"\n            :error-messages=\"errors.collect('valueOfKind')\"\n            data-vv-name=\"valueOfKind\"\n            placeholder=\"Category\"\n          />\n          <v-menu\n            ref=\"menu1\"\n            v-model=\"menu1\"\n            :close-on-content-click=\"false\"\n            transition=\"scale-transition\"\n            offset-y\n            full-width\n            max-width=\"290px\"\n            min-width=\"290px\"\n          >\n            <template v-slot:activator=\"{ on }\">\n              <v-text-field\n                v-model=\"dateFormatted\"\n                label=\"Released\"\n                hint=\"MM/DD/YYYY\"\n                readonly\n                persistent-hint\n                prepend-icon=\"mdi-calendar\"\n                @blur=\"date = parseDate(dateFormatted)\"\n                v-on=\"on\"\n                required\n              ></v-text-field>\n            </template>\n            <v-date-picker v-model=\"date\" no-title @input=\"menu1 = false\"></v-date-picker>\n          </v-menu>\n        </div>\n        <div>\n          <vv-select\n            multiple\n            v-model=\"selectedSingers\"\n            :options=\"singers\"\n            :elevation=\"4\"\n            v-validate=\"{required: 'required'}\"\n            :error-messages=\"errors.collect('selectedSingers')\"\n            data-vv-name=\"selectedSingers\"\n            placeholder=\"Singers\"\n          />\n        </div>\n        <vue-editor v-model=\"lyrics\" placeholder=\"Lyrics...\" class=\"mt-5 mb-5\" style=\"border-radius:4px\"/>\n        <div class=\"d-flex justify-end\">\n          <v-btn class=\"mr-4\" type=\"submit\" color=\"secondary\" style=\"color:primary\">submit</v-btn>\n          <v-btn to=\"/singer\" color=\"#e6e6e6\" >Back</v-btn>\n        </div>\n      </div>\n    </div>\n  </v-form>\n</template>\n\n<script>\nimport { mapActions } from 'vuex';\nimport PictureInput from 'vue-picture-input';\n\nimport axios from 'axios';\nimport VueAxios from 'vue-axios';\nimport Vue from 'vue';\n\nVue.use(VueAxios, axios);\n\nexport default {\n  data(vm) {\n    return {\n      name: '',\n      date: new Date().toISOString().substr(0, 10),\n      dateFormatted: vm.formatDate(new Date().toISOString().substr(0, 10)),\n      menu1: false,\n      valueOfKind: '',\n      kinds: ['Pop', 'Ballad', 'Rap'],\n      lyrics: '',\n      imageFile: '',\n      drawer: true,\n      value: '',\n      selectedSingers: [],\n      singers: [],\n    };\n  },\n  components: {\n    PictureInput,\n  },\n  created() {\n    this.$store.watch(\n      state => state.hambuger.drawer,\n      () => {\n        const msg = this.$store.state.hambuger.drawer;\n        if (msg !== '') {\n          this.drawer = msg;\n        }\n      },\n    );\n    axios\n      .get('http://jsonplaceholder.typicode.com/posts?userId=1')\n      .then(res => res.data)\n      .then((data) => {\n        data.forEach((item) => {\n          this.singers.push(item.id);\n        });\n      });\n  },\n  computed: {\n    computedDateFormatted() {\n      return this.formatDate(this.date);\n    },\n  },\n  watch: {\n    date(val) {\n      this.dateFormatted = this.formatDate(this.date);\n    },\n  },\n\n  methods: {\n    ...mapActions('singer', {\n      addSinger: 'addSinscssger',\n    }),\n    // format Date\n    formatDate(date) {\n      if (!date) return null;\n\n      const [year, month, day] = date.split('-');\n      return `${month}/${day}/${year}`;\n    },\n    parseDate(date) {\n      if (!date) return null;\n\n      const [month, day, year] = date.split('/');\n      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    },\n    // multiselect\n    clearAll() {\n      this.selectedSingers = [];\n    },\n    // main event\n    submit() {\n      this.$validator\n        .validateAll()\n        .then((result) => {\n          console.log(result);\n          if (!this.imageFile) {\n            this.$store.commit('setSnack', {\n              snack: 'Please upload image',\n              color: 'error',\n            });\n            return;\n          }\n          if (result) {\n            const loader = this.$loading.show();\n            this.addSinger({\n              fullname: this.fullname,\n              date: this.dateFormatted,\n              country: this.country,\n              followers: this.followers,\n              biography: this.biography,\n              imageFile: this.imageFile,\n            })\n              .then(() => {\n                this.$store.commit('setSnack', {\n                  snack: 'Data has been added successfully!',\n                  color: 'success',\n                });\n                this.clear();\n                this.$router.push({ name: 'SingerListPage' });\n                loader.hide();\n              })\n              .catch((error) => {\n                this.$store.commit('setSnack', {\n                  snack: `Something went wrong, please try again later${error.message}`,\n                  color: 'error',\n                });\n                loader.hide();\n              });\n          }\n        })\n        .catch((error) => {\n          this.$store.commit('setSnack', {\n            snack: `Something went wrong, please try again later${error.message}`,\n            color: 'error',\n          });\n        });\n    },\n    onChange() {\n      if (this.$refs.pictureInput.image) {\n        this.imageFile = this.$refs.pictureInput.file;\n      }\n      console.log(this.$refs.pictureInput.file);\n      // if (this.$refs.pictureInput.image) {\n      //   let vm = this;\n      //   this.imageFile = this.$refs.pictureInput.file;\n      //   //create a storage ref\n      //   const storageRef = firebase\n      //     .storage()\n      //     .ref(\"image/\" + this.imageFile.name);\n      //   const task = storageRef.put(this.imageFile).then(snapshot => {\n      //     storageRef\n      //       .getDownloadURL()\n      //       .then(function(url) {\n      //         // get Url\n      //         vm.imageFileUrl = url;\n      //         console.log(vm.imageFileUrl);\n      //       })\n      //       .catch(error => {\n      //         console.log(error.message);\n      //       });\n      //   });\n      // }\n      // if (image) {\n      //   console.log(image);\n\n      //   this.imageFile = image;file\n      //   console.log(this.imageFile);\n      // } else {\n      //   console.log(\"FileReader API not supported: use the <form>, Luke!\");\n      // }\n\n      // const file = e.target.files[0];\n      // \t\tconsole.log(file);\n      // \t\t//create a storage ref\n      // \t\tconst storageRef = firebase.storage().ref('image/' + file.name);\n      // \t\t//upload file\n      // \t\tconst task = storageRef.put(file)\n      // \t\t\t.then((snapshot) => {\n      // \t\t\t\tstorageRef.getDownloadURL().then(function (url) {\n      // \t\t\t\t\t// get Url\n      // \t\t\t\t\timageUrlStorage = url;\n      // \t\t\t\t}).catch()\n      // \t\t\t});\n    },\n    onRemoved() {\n      // // Create a reference to the file to delete\n      // var desertRef = storageRef.child(\"images/\"+this.imageFile.name);\n\n      // // Delete the file\n      // desertRef\n      //   .delete()\n      //   .then(function() {\n\n      //   })\n      //   .catch(function(error) {\n      //     console.log(error.message);\n      //   });\n      //   this.imageFileUrl = \"\";\n      this.imageFile = '';\n    },\n    clear() {\n      this.$validator.reset();\n    },\n  },\n};\n</script>\n"]}]}